SyntaxTokens:
  Semicolon ;
  Keyword <dyn>
  Identifier <dyn>
  Equals =
  EqualsEquals ==
  AndAnd &&
  OrOr ||
  LessThan <
  GreaterThan >
  GreaterThanEqu >=
  LessThanEqu <=
  Plus +
  Minus -
  Mod %
  Mul *
  Div /
  Idx #
  Pow ^
  Dot .
  Colon :
  LParen (
  RParen )
  Comma ,
  Int <dyn>
  Float <dyn> 
  String <dyn>
  LSqBracket [
  RSqBracket ]
  LBraces {
  RBraces }
  Bang !
  EOF
  
Keywords:
  return
  continue
  break
  if
  elseif
  else
  for
  while
  func
  import
  native
  new
  class
  static
  export
  const
  fixedprops

statements    : (statement)*
scoped-statements: LBRACE (statement)* RBRACE
scoped-or-expr: LBRACE (statement)* RBRACE | expr SEMICOLON

statement     : KEYWORD:return expr?
              : KEYWORD:continue|break
              : KEYWORD:import
                  KEYWORD:native IDENTIFIER
                | LITERAL:STRING
              : KEYWORD:export IDENTIFIER
              : class-def
              : expr
              : SEMICOLON
              
expression    : (KEYWORD:const)? KEYWORD:var IDENTIFIER (EQUALS expression)?
              : IDENTIFIER EQUALS expression
              : comp-expr ((&& | ||) comp-expr)*
              
comp-expr     : !comp-expr
              : arith-expr ((==|<|>|<=|>=) aright-expr)*
              
arith-expr    : term ((PLUS|MINUS) term)*
              
term          : factor ((MOD|MUL|DIV|IDX) factor)*
              
factor        : (PLUS|MINUS) factor
              : power
              
power         : call ((POW) factor)*

call          : cast (DOT IDENTIFIER|call)*? (LPAREN (expr (COMMA expr)*)? RPAREN)?
              
cast          : (LessThan IDENTIFIER:int|float|string|list GreaterThan) cast
              : atom

atom          : INT|FLOAT|STRING|IDENTIFIER
              : LPAREN expr RPAREN
              : list-expr
              : if-expr
              : for-expr
              : while-expr
              : func-def
              : instantiate
              
list-expr     : LSQBRACKET (expr (COMMA expr)*)? RSQBRACKET
              
if-expr       : KEYWORD:if LPAREN expr RPAREN scoped-or-expr
                (KEYWORD:elseif LPAREN expr RPAREN scoped-or-expr)*?
                (KEYWORD:else scoped-or-expr)?
              
for-expr      : KEYWORD:for LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN
                scoped-or-expr
              
while-expr    : KEYWORD:while expr
                scoped-or-expr
              
func-def      : KEYWORD:func IDENTIFIER
                LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                scoped-statements

class-def     : KEYWORD:class KEYWORD:fixedprops? IDENTIFIER LBRACE class-body RBRACE

class-body    : (class-funcdef|class-propdef*)?

class-funcdef : KEYWORD:func KEYWORD:static? IDENTIFIER func-args scoped-statements
class-propdef : KEYWORD:prop KEYWORD:static? IDENTIFIER EQUALS expression

func-args     : LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
instantiate   : KEYWORD:new IDENTIFIER LPAREN ((expr (COMMA expr))*)? RPAREN