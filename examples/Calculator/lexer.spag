import native lang;
import native io;

var TokenType = new EnumVal(["BADTOK", "NUMBER",  "PLUS",
                            "MINUS", "MUL", "DIV",
                            "LPAREN", "RPAREN", "EOF"]);

// var BADTOK = -1;
// var NUMBER = 0;
// var PLUS = 1;
// var MINUS = 2;
// var MUL = 3;
// var DIV = 4;
// var LPAREN = 5;
// var RPAREN = 6;
// var EOF = 7; 

class fixedprops Lexer {
    prop text = "";
    prop pos = 0;

    func current(self) {
        return self.peek(0);
    }

    func peek(self, off) {
        if(self.pos + off >= string.length(self.text) || self.pos + off < 0) return "\0";

        return self.text#(self.pos + off);
    }

    func ctor(self, text) {
        self.text = text;
    }

    func lex(self) {
        var toks = [];

        while((self.current() == "\0") == 0) {
            var current = self.current();
            var insertTok = self.tryGetTokenRegular(current);

            if(insertTok.type == TokenType.BADTOK) {
                if(Lexer.isNumber(current)) {
                    var numStr = "";
                    var startPos = self.pos;

                    while(Lexer.isNumber(self.current())) {
                        numStr += self.current();
                        self.pos = self.pos + 1;
                    }

                    toks += new SyntaxToken(TokenType.NUMBER, startPos, int.parse(numStr), numStr);
                }else if(current == " ") {
                    self.pos = self.pos + 1;
                }else {
                    println("LEX ERROR AT POS " + toString(self.pos) + " (text=" + self.current() + "); CAN NOT GURANTEE SUCCESSFUL EXECUTION!");
                    self.pos = self.pos + 1;
                }

                
            }else {
                toks += insertTok;
                // BUG TO FIX: ++ and += do NOT work with dot assignments!
                self.pos = self.pos + 1;
            }
        }

        toks += new SyntaxToken(TokenType.EOF, self.pos, 0, "\0");
        return toks;
    }

    func tryGetTokenRegular(self, current) {
        if(current == "+") {
            return new SyntaxToken(TokenType.PLUS, self.pos, 0, current);
        }

        if(current == "-") {
            return new SyntaxToken(TokenType.MINUS, self.pos, 0, current);
        }

        if(current == "*") {
            return new SyntaxToken(TokenType.MUL, self.pos, 0, current);
        }

        if(current == "/") {
            return new SyntaxToken(TokenType.DIV, self.pos, 0, current);
        }

        if(current == "(") {
            return new SyntaxToken(TokenType.LPAREN, self.pos, 0, current);
        }

        if(current == ")") {
            return new SyntaxToken(TokenType.RPAREN, self.pos, 0, current);
        }

        return new SyntaxToken(TokenType.BADTOK, self.pos, 0, current);
    }

    func static isNumber(current) {
        return current == "0" || current == "1" || current == "2"
                || current == "3" || current == "4" || current == "5"
                || current == "6" || current == "7" || current == "8"
                || current == "9";
    }
}

class fixedprops SyntaxToken {
    prop type = 0
    prop pos = 0;
    prop value = 0;
    prop text = "";

    func ctor(self, type, pos, value, text) {
        self.type = type;
        self.pos = pos;
        self.value = value;
        self.text = text;
    }

    func toString(self) {
        return "Type: " + self.getTypeString() + " at " + toString(self.pos) + " with value " + toString(self.value) + " and text " + toString(self.text);
    }

    func getTypeString(self) {
        if(self.type == TokenType.BADTOK) return "BadToken";
        if(self.type == TokenType.NUMBER) return "Number";
        if(self.type == TokenType.PLUS) return "Plus";
        if(self.type == TokenType.MINUS) return "Minus";
        if(self.type == TokenType.MUL) return "Mul";
        if(self.type == TokenType.DIV) return "Div";
        if(self.type == TokenType.LPAREN) return "LParen";
        if(self.type == TokenType.RPAREN) return "RParen";
        if(self.type == TokenType.EOF) return "EOF";
    }
}

export Lexer;
export SyntaxToken;
export TokenType;